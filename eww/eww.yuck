(defwidget bar [screen]
  (centerbox :orientation "v"
    (box :class "segment-top"
         :valign "start"
      (top :screen screen))
    (box :valign "center"
         :class "middle" 
      (middle :screen screen))
    (box :valign "end"
         :class "segment-bottom" 
      (bottom :screen screen))))




(defwidget top [screen] (workspaces))

(defwidget middle [] (time))

(defwidget bottom [screen] 
  (box :orientation "v"
       :valign "end"
       :space-evenly true
       :spacing "5"

    (metric :icon "" :xpos -2 (music-button))

    (volume)

    (metric :icon "󰋊" :font-size 1.06
      "${round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}%")

    (metric :icon "󰒋" "${round(EWW_RAM.used_mem_perc, 0)}%")

    (metric :icon "" "${round(EWW_CPU.avg, 0)}%")

    (box :class "metric" (date))
  )
)




(deflisten workspace "scripts/get-workspaces.sh")
(deflisten activews :initial 1 `scripts/get-active-workspace.sh`)
(defwidget workspaces []
  (eventbox
    :onscroll "bash ~/.config/eww/scripts/change-active-workspace.sh {} ${activews}"
    :class "workspaces-widget"
    (overlay
      ; Only displays workspace state (has windows or not)
      (box
        :orientation "v"
        :class "workspaces"
        :spacing 0
        (for i in workspace
          (button
            :onclick "hyprctl dispatch workspace ${i.id}"
            :class "workspace-entry ${i.id == activews ? "current" : ""} ${i.windows > 0 ? "occupied" : "empty"}"
            (label
              :text "${i.windows > 0 ? "◆" : "◇"}"
            )
          )
        )
      )
    )
  )
)


(defwidget time []
  (box :orientation "v" 
       :class "time"
    hour min))




(defwidget metric [icon ?font-size ?xpos]
  (box :class "metric" 
       :orientation "v"
    (label :class "metric-icon" 
           :style "${font-size != "" ? "font-size: ${font-size}rem;" : ""}${xpos != "" ? "margin-left: ${xpos}px;" : ""}"
           :text icon)
    (children)))




(deflisten music_data :initial `{"status": ""}` "bash ~/.config/eww/scripts/get-music-status.sh")
(defwidget music-button []
  (button :onclick "playerctl play-pause"
    "${music_data == "" ? "" : music_data.status == "Playing" ? "" : ""}"))




(deflisten audio_data :initial `{"volume": 0, "muted": false}` "bash ~/.config/eww/scripts/get-volume.sh")
(defwidget volume []
  (box :class "metric volume"
       :orientation "v"
       :space-evenly false
       :valign "fill"
       :vexpand false
    (scale :orientation "h" 
           :min 0
           :max 100 
           :onchange "pamixer --set-volume $(echo {} | sed 's/\\..*//g')"
           :value "${audio_data.volume}")
    (eventbox :onscroll "if [ '{}' == 'up' ]; then pamixer -i 5; else pamixer -d 5; fi"
              :vexpand true
              :valign "fill"
      (box :orientation "v"
           :valign "fill"
           :vexpand true
        (button :onclick "pamixer -t"
          (label :class "metric-icon"
                 :style "font-size: 1.2rem;"
                 :text "${audio_data.muted ? "婢" : "墳"}"))
        (button :onclick "pavucontrol &" :style "padding-bottom: 6px;"
          "${audio_data.volume}%")))))




(defwidget date []
  (box :orientation "v" 
       :halign "center" 
    day_word day month year))

(defpoll hour :interval "1s" "date +%H")
(defpoll min  :interval "1s" "date +%M")

(defpoll day_word :interval "10m" "date +%a | tr [:upper:] [:lower:]")
(defpoll day      :interval "10m" "date +%d")
(defpoll month    :interval "1h"  "date +%m")
(defpoll year     :interval "1h"  "date +%y")




(defwindow bar_1
  :monitor 0
  :windowtype "dock"
  :stacking "fg"
  :geometry (geometry :x 4 :y 4 :width "40px" :height "1432px" :anchor "left center")
  :exclusive true

  (bar :screen 1))

